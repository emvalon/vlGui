# @file picture2array.py
# @author Weilong Shen (valonshen@foxmail.com)
# @brief
# @version 0.1
# @date 2022-07-26
#
# Copyright Â© 2021 - 2022 Weilong Shen (valonshen@foxmail.com)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import os
import argparse
import cv2

parse = argparse.ArgumentParser()
parse.add_argument("-f", "--file", default="image", help="file name")
parse.add_argument("-d", "--driver", default="ssd1306", choices=["ssd1306"], help="driver chip which will be used")
parse.add_argument("-t", "--threshold", default=0, type=int, help="the threshold to be referenced")
parse.add_argument("-m", "--mode", default="Normal", choices=["Normal", "Adaptive"], help="specify mode")
parse.add_argument("-r", "--reverse", default=0, type=int)
parse.add_argument("-w", "--width", default=0, type=int, help="resized width")
parse.add_argument("-hig", "--height", default=0, type=int, help="resized height")
parse.add_argument("-o", "--output", default="None", help="output file name")
parse.add_argument("-s", "--show", action='store_true', help="show the result")


def ssd1306_save(f, w, h, resizeBinary):
    n = 0
    row = 0

    f.write("    ")
    while 1:
        data = 0
        for col in range(w):
            offset = col % 8
            if resizeBinary[row][col]:
                    data |= 1 << offset

            if (offset == 7) or (col is (w - 1)):
                f.write("0x{:02x}, ".format(data))
                data = 0
                n = n + 1
                if n >= 16:
                    n = 0
                    f.write("\n    ")
            
        # Move to the next line
        row = row + 1
        if row >= h:
            break
           

    # n = 0
    # row = 0

    # f.write("    ")
    # while 1:
    #     for col in range(w):
    #         data = 0
    #         for l in range(8):
    #             line = row + l
    #             if line >= h:
    #                 break
    #             if resizeBinary[line][col]:
    #                 data |= 1 << l
    #         f.write("0x{:02x}, ".format(data))
    #         n = n + 1
    #         if n >= 16:
    #             f.write("\n    ")
    #             n = 0
    #     row = row + 8
    #     if row >= h:
    #         break

if __name__ == '__main__':
    # Check if this file exits
    args = parse.parse_args()
    if not os.path.exists(args.file):
        print("File doesn't exit!\n")
        exit()

    image = cv2.imread(args.file)
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    if args.mode == "Normal":
        if args.reverse:
            ret, binary = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY_INV | cv2.THRESH_OTSU)
        else:
            ret, binary = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY | cv2.THRESH_OTSU)
    elif args.mode == "Adaptive":
        if args.reverse:
            binary = cv2.adaptiveThreshold(gray, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY, 15, 0)
        else:
            binary = cv2.adaptiveThreshold(gray, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY_INV, 15, 0)

    # Resize
    w = args.width
    h = args.height
    if w == 0:
        w = binary.shape[1]
    if h == 0:
        h = binary.shape[0]

    resizeBinary = cv2.resize(binary, (w, h), 1, 1, cv2.INTER_NEAREST)
    # print(resizeBinary)
    # Save
    if args.output != "None":
        with open(args.output, 'w', encoding="utf-8") as f:
            incDefine = "_" + str(args.output).split('.')[0].upper() + "_H_"
            f.writelines("/* Generated by vlGui tool v0.0.1\n")
            f.writelines(" * Size: " + str(w) + " x " + str(h) + "\n")
            f.writelines(" * Image's name: " + str(args.output).split('.')[0] + "\n")
            f.writelines(" * Driver: " + args.driver + "\n")
            f.writelines(" */\n")
            f.writelines("#ifndef " + incDefine + "\n")
            f.writelines("#define " + incDefine + "\n\n")
            f.writelines("const unsigned char " + str(args.output).split('.')[0] + "[] = {\n")

            if args.driver == "ssd1306":
                ssd1306_save(f, w, h, resizeBinary)

            f.writelines("\n};\n\n#endif // " + incDefine)

    if args.show:
        cv2.imshow(args.output, resizeBinary)
        cv2.waitKey()

    #
    # with Image.open(args.file) as image:
    #     print(image)
    #     output = image.resize((w, h))
    #     # output.show()
    #     output = output.convert('1')
    #     output.show()
