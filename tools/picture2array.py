# @file picture2array.py
# @author Weilong Shen (valonshen@foxmail.com)
# @brief
# @version 0.2
# @date 2025-04-27
#
# Copyright © 2021 - 2025 Weilong Shen (valonshen@foxmail.com)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import os
import argparse
from PIL import Image, ImageOps

TOOL_VERSION="v0.1.0"

parse = argparse.ArgumentParser()
parse.add_argument("-f", "--file", default="image", help="file name")
parse.add_argument("-d", "--driver", default="ssd1306", choices=["ssd1306"], help="driver chip which will be used")
parse.add_argument("-t", "--threshold", default=180, type=int, help="the threshold to be referenced")
parse.add_argument("-w", "--width", default=128, type=int, help="resized width")
parse.add_argument("-hi", "--height", default=64, type=int, help="resized height")
parse.add_argument("-o", "--output", default="None", help="output file name")
parse.add_argument("-s", "--show", action='store_true', help="show the result")
parse.add_argument("-r", "--reverse", default=0, type=int, help="Reverse the color")


def ssd1306_save(f, w, h, pixels):
    n = 0
    row = 0

    f.write("    ")
    while 1:
        data = 0
        for col in range(w):
            offset = col % 8
            if pixels[col, row]:
                    data |= 1 << offset

            if (offset == 7) or (col is (w - 1)):
                f.write("0x{:02x}, ".format(data))
                data = 0
                n = n + 1
                if n >= 16:
                    n = 0
                    f.write("\n    ")
            
        # Move to the next line
        row = row + 1
        if row >= h:
            break


if __name__ == '__main__':
    # Check if this file exits
    args = parse.parse_args()
    if not os.path.exists(args.file):
        print("File doesn't exit!\n")
        exit()

    # 打开原图 转成灰度图
    img = Image.open(args.file).convert('L')

    # 调整到固定大小
    imgSize = (args.width, args.height)
    img = img.resize(imgSize, Image.LANCZOS)

    # 二值化（黑白化）
    img = img.point(lambda p: 255 if p > args.threshold else 0, mode='1')

    #反转颜色
    if args.reverse:
        img = ImageOps.invert(img)

    if args.output == "None":
        base_name = os.path.basename(args.file)
        name_without_ext = os.path.splitext(base_name)[0]
        name_without_ext = "vlGui_bitmap" + name_without_ext[0].upper() + name_without_ext[1:]
        outputName = f"{name_without_ext}.h"
        targetPath = "bitmap/" + outputName
    else:
        base_name = os.path.basename(args.output)
        name_without_ext = os.path.splitext(base_name)[0]
        targetPath = args.output
    print("targetPath: " + targetPath)

    os.makedirs(os.path.dirname(targetPath), exist_ok=True) 
    with open(targetPath, 'w', encoding="utf-8") as f:
        incDefine = "_" + str(name_without_ext).upper() + "_H_"
        f.writelines("/* Generated by vlGui tool " + TOOL_VERSION + "\n")
        f.writelines(" * Size: " + str(args.width) + " x " + str(args.height) + "\n")
        f.writelines(" * Image's name: " + str(name_without_ext) + "\n")
        f.writelines(" * Driver: " + args.driver + "\n")
        f.writelines(" */\n")
        f.writelines("#ifndef " + incDefine + "\n")
        f.writelines("#define " + incDefine + "\n\n")
        f.writelines("const unsigned char " + str(name_without_ext) + "[] = {\n")

        f.write("    ")
        f.write("0x{:02x}, ".format(args.width & 0xff))
        f.write("0x{:02x}, ".format((args.width >> 8) & 0xff))
        f.write("0x{:02x}, ".format(args.height & 0xff))
        f.write("0x{:02x}, ".format((args.height >> 8) & 0xff))
        f.write("\n")

        if args.driver == "ssd1306":
            ssd1306_save(f, args.width, args.height, img.load())

        f.writelines("\n};\n\n#endif // " + incDefine)

    if args.show:
        img.show()
